# Default values for QDIAK deployment.
# Most of these values are for linking resources or configuring their behavior in a way
# that is agnostic of the deployment target / specifics.

# Contents of this file are unlikely to change deployment-to-deployment.

###############################################################################################################################################################


# Configure external database host
# MIGHT NOT WORK ANYMORE
# dbHost: ""
# dbPort: 3306
# dbRootUser: ""
# dbRootPassword: ""

nameOverride: ""

frontend:
  service:
    type: ClusterIP
    port: 8080
  environment:
    upstreamRealIPAddress: "127.0.0.1"
    upstreamRealIPRecursive: "off"
    upstreamRealIPHeader: "X-Forwarded-For"
    frappeSiteNameHeader: "$host"
  deployment:
    livenessProbe:
      tcpSocket:
        port: 8080
      initialDelaySeconds: 5
      periodSeconds: 10
    readinessProbe:
      tcpSocket:
        port: 8080
      initialDelaySeconds: 5
      periodSeconds: 10
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

nginx: {}
  # config: |
  #   # custom template /etc/nginx/templates/default.conf.template
  #   # https://github.com/nginxinc/docker-nginx-unprivileged/blob/main/stable/alpine/20-envsubst-on-templates.sh

backend:
  service:
    type: ClusterIP
    port: 8000
  deployment:
    replicaCount: 1
    livenessProbe:
      tcpSocket:
        port: 8000
      initialDelaySeconds: 5
      periodSeconds: 10
    readinessProbe:
      tcpSocket:
        port: 8000
      initialDelaySeconds: 5
      periodSeconds: 10
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    args:
      # https://pythonspeed.com/articles/gunicorn-in-docker/
      # allowed workerClass options are "gevent", "gthread", "sync", default "gevent"
      # set --config=/opt/patches/gevent_patch.py to use gevent.monkey.patch_all()
    - /home/frappe/frappe-bench/env/bin/gunicorn
    - --bind=0.0.0.0:8000
    - --config=/opt/patches/gevent_patch.py
    - --log-file=-
    - --preload
    - --threads=4
    - --timeout=120
    - --worker-class=gevent
    - --worker-tmp-dir=/dev/shm
    - --workers=2
    - frappe.app:application
    envVars: []
    initContainers: []
    sidecars: []

socketio:
  service:
    type: ClusterIP
    port: 9000
  deployment:
    image:
      repository: frappe/frappe-socketio
      tag: v13.36.2
      pullPolicy: IfNotPresent
    replicaCount: 1
    livenessProbe:
      tcpSocket:
        port: 9000
      initialDelaySeconds: 5
      periodSeconds: 10
    readinessProbe:
      tcpSocket:
        port: 9000
      initialDelaySeconds: 5
      periodSeconds: 10
    resources: {}
    envVars: []
    initContainers: []
    sidecars: []

worker:
  # This sample configuration is used for all worker deployments
  # In case more customization is needed fill out the below objects in a similar fashion
  # and change the belonging manifest to use those values
  sample:
    replicaCount: 1
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    livenessProbe:
      override: false
      probe: {}
    readinessProbe:
      override: false
      probe: {}
    envVars: []
    initContainers: []
    sidecars: []
  default: {}
  short: {}
  long: {}
  scheduler: {}

  healthProbe: |
    exec:
      command:
        - bash
        - -c
        - echo "Ping backing services";
        {{- if .Values.mariadb.enabled }}
        {{- if eq .Values.mariadb.architecture "replication" }}
        - wait-for-it {{ include "deps.release.name" . }}-mariadb-primary:{{ .Values.mariadb.primary.service.ports.mysql }} -t 1;
        {{- else }}
        - wait-for-it {{ include "deps.release.name" . }}-mariadb:{{ .Values.mariadb.primary.service.ports.mysql }} -t 1;
        {{- end }}
        {{- else if .Values.dbHost }}
        - wait-for-it {{ .Values.dbHost }}:{{ .Values.mariadb.primary.service.ports.mysql }} -t 1;
        {{- end }}
        {{- if index .Values "redis-cache" "host" }}
        - wait-for-it {{ include "deps.release.name" . }}-redis-cache-master:{{ index .Values "redis-cache" "master" "containerPorts" "redis" }} -t 1;
        {{- else if index .Values "redis-cache" "host" }}
        - wait-for-it {{ index .Values "redis-cache" "host" }} -t 1;
        {{- end }}
        {{- if index .Values "redis-queue" "host" }}
        - wait-for-it {{ include "deps.release.name" . }}-redis-queue-master:{{ index .Values "redis-queue" "master" "containerPorts" "redis" }} -t 1;
        {{- else if index .Values "redis-queue" "host" }}
        - wait-for-it {{ index .Values "redis-queue" "host" }} -t 1;
        {{- end }}
        {{- if index .Values "redis-socketio" "host" }}
        - wait-for-it {{ include "deps.release.name" . }}-redis-socketio-master:{{ index .Values "redis-socketio" "master" "containerPorts" "redis" }} -t 1;
        {{- else if index .Values "redis-socketio" "host" }}
        - wait-for-it {{ index .Values "redis-socketio" "host" }} -t 1;
        {{- end }}
        {{- if .Values.postgresql.host }}
        - wait-for-it {{ .Values.postgresql.host }}:{{ .Values.postgresql.primary.service.ports.postgresql }} -t 1;
        {{- else if .Values.postgresql.enabled }}
        - wait-for-it {{ include "deps.release.name" . }}-postgresql:{{ .Values.postgresql.primary.service.ports.postgresql }} -t 1;
        {{- end }}
    initialDelaySeconds: 15
    periodSeconds: 5

jobs:
  volumePermissions:
    enabled: true
    backoffLimit: 0
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

  configure:
    enabled: true
    fixVolume: false
    backoffLimit: 0
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

  createSite:
    enabled: true
    forceCreate: true
    siteName: "qdiak.example"
    adminPassword: "changeit"
    installApps: []
    dbType: "mariadb"
    backoffLimit: 0
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

  migrate:
    enabled: true
    siteName: "qdiak.example"
    backoffLimit: 0
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

  # dropSite:
  #   enabled: false
  #   forced: false
  #   siteName: "qdiak.example"
  #   backoffLimit: 0
  #   resources: {}
  #   nodeSelector: {}
  #   tolerations: []
  #   affinity: {}

  # backup:
  #   enabled: false
  #   siteName: "qdiak.example"
  #   withFiles: true
  #   push:
  #     enabled: false
  #     # bucket: "erpnext"
  #     # region: "us-east-1"
  #     # accessKey: "ACCESSKEY"
  #     # secretKey: "SECRETKEY"
  #     # endpoint: http://store.storage.svc.cluster.local
  #   backoffLimit: 0
  #   resources: {}
  #   nodeSelector: {}
  #   tolerations: []
  #   affinity: {}

serviceAccount:
  name: qdiak-serviceaccount  
  create: true

podSecurityContext:
  supplementalGroups: [1000]
  fsGroup: 1000


securityContext:
  capabilities:
    add:
    - CAP_CHOWN
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  runAsUser: 1000

redis-cache:
  # https://github.com/bitnami/charts/tree/master/bitnami/redis
  enabled: true
  # host: ""
  architecture: standalone
  auth:
    enabled: false
    sentinal: false
  master:
    containerPorts:
      redis: 6379
    persistence:
      enabled: false

redis-queue:
  # https://github.com/bitnami/charts/tree/master/bitnami/redis
  enabled: true
  # host: ""
  architecture: standalone
  auth:
    enabled: false
    sentinal: false
  master:
    containerPorts:
      redis: 6379
    persistence:
      enabled: false

redis-socketio:
  # https://github.com/bitnami/charts/tree/master/bitnami/redis
  enabled: true
  # host: ""
  architecture: standalone
  auth:
    enabled: false
    sentinal: false
  master:
    containerPorts:
      redis: 6379
    persistence:
      enabled: false

mariadb:
  # https://github.com/bitnami/charts/tree/master/bitnami/mariadb
  enabled: true
  architecture: "standalone"
  auth:
    rootPassword: "changeit"
    username: "erpnext"
    password: "changeit"
    replicationPassword: "changeit"
    existingSecret: qdiak-mariadb
  primary:
    service:
      ports:
        mysql: 3306
    createConfigmap: true
    configuration: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      plugin_dir=/opt/bitnami/mariadb/plugin
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=::
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log

      # Frappe Specific Changes
      character-set-client-handshake=FALSE
      character-set-server=utf8mb4
      collation-server=utf8mb4_unicode_ci

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      plugin_dir=/opt/bitnami/mariadb/plugin

      # Frappe Specific Changes
      default-character-set=utf8mb4

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid

postgresql:
  # https://github.com/bitnami/charts/tree/master/bitnami/postgresql
  enabled: false
  # host: ""
  auth:
    username: "postgres"
    postgresPassword: "changeit"
  primary:
    service:
      ports:
        postgresql: 5432
